{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"19biPa3dRXIZXp9cRMtPi_UnSTz4xbx1u","timestamp":1665066628324}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard","widgets":{"application/vnd.jupyter.widget-state+json":{"ff776f6fe9f74923baff043853fb67cc":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6c2475197cf5446f851a34b43fdc5e13","IPY_MODEL_a3ea337ddc624a73949ad2baf71716e2","IPY_MODEL_263ef85cddce46659beeda42984cf3b4"],"layout":"IPY_MODEL_79c4ebe199b74369a9cd8fd9aee20d58"}},"6c2475197cf5446f851a34b43fdc5e13":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_96d3714aa3ae44ba8d85c44a866e505b","placeholder":"​","style":"IPY_MODEL_893bfa595f3d4d7b94623b2665d762a3","value":"100%"}},"a3ea337ddc624a73949ad2baf71716e2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_29a5248f0f32454c806cf2ef838b0078","max":5,"min":0,"orientation":"horizontal","style":"IPY_MODEL_34af22995c0846ff9fc56beb59f873b7","value":5}},"263ef85cddce46659beeda42984cf3b4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6469df7b4ad7480f9ed4bc504e87d945","placeholder":"​","style":"IPY_MODEL_5ec24f3e9e9c48f999471b9622c3c9d6","value":" 5/5 [00:00&lt;00:00, 85.10it/s]"}},"79c4ebe199b74369a9cd8fd9aee20d58":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"96d3714aa3ae44ba8d85c44a866e505b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"893bfa595f3d4d7b94623b2665d762a3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"29a5248f0f32454c806cf2ef838b0078":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"34af22995c0846ff9fc56beb59f873b7":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6469df7b4ad7480f9ed4bc504e87d945":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5ec24f3e9e9c48f999471b9622c3c9d6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E_dB-xWKWxmB","executionInfo":{"status":"ok","timestamp":1665474947055,"user_tz":-540,"elapsed":5112,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"05939ad6-9882-4c4b-9beb-f8ce734a215a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: datasets in /usr/local/lib/python3.7/dist-packages (2.5.2)\n","Requirement already satisfied: huggingface-hub<1.0.0,>=0.2.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.10.0)\n","Requirement already satisfied: xxhash in /usr/local/lib/python3.7/dist-packages (from datasets) (3.0.0)\n","Requirement already satisfied: multiprocess in /usr/local/lib/python3.7/dist-packages (from datasets) (0.70.13)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from datasets) (5.0.0)\n","Requirement already satisfied: responses<0.19 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.18.0)\n","Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (2.23.0)\n","Requirement already satisfied: dill<0.3.6 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.3.5.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from datasets) (1.21.6)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.7/dist-packages (from datasets) (3.8.3)\n","Requirement already satisfied: fsspec[http]>=2021.11.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (2022.8.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from datasets) (1.3.5)\n","Requirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (4.64.1)\n","Requirement already satisfied: pyarrow>=6.0.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (6.0.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from datasets) (21.3)\n","Requirement already satisfied: asynctest==0.13.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (0.13.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (6.0.2)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (22.1.0)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (2.1.1)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.8.1)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.0.2)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.3.1)\n","Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.1.1)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.2.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0.0,>=0.2.0->datasets) (6.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0.0,>=0.2.0->datasets) (3.8.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->datasets) (3.0.9)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (1.25.11)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2022.9.24)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2.10)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->datasets) (3.8.1)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2022.4)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->datasets) (1.15.0)\n"]}],"source":["!pip install datasets"]},{"cell_type":"code","source":["from datasets import *"],"metadata":{"id":"WjQYXVtYW6Yl","executionInfo":{"status":"ok","timestamp":1665474948599,"user_tz":-540,"elapsed":1550,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["'''\n","CD = load_dataset('ccdv/patent-classification') # classfication dataset\n","GD = load_dataset('amazon_reviews_multi') # generation dataset\n","SD = load_dataset('gem') # summary dataset\n","'''"],"metadata":{"id":"F6xmOgrCXFFV","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1665474948603,"user_tz":-540,"elapsed":13,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"7edf58da-14e9-4474-e9b5-9f0a5e736406"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nCD = load_dataset('ccdv/patent-classification') # classfication dataset\\nGD = load_dataset('amazon_reviews_multi') # generation dataset\\nSD = load_dataset('gem') # summary dataset\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["SD = load_dataset('GEM/wiki_lingua')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":85,"referenced_widgets":["ff776f6fe9f74923baff043853fb67cc","6c2475197cf5446f851a34b43fdc5e13","a3ea337ddc624a73949ad2baf71716e2","263ef85cddce46659beeda42984cf3b4","79c4ebe199b74369a9cd8fd9aee20d58","96d3714aa3ae44ba8d85c44a866e505b","893bfa595f3d4d7b94623b2665d762a3","29a5248f0f32454c806cf2ef838b0078","34af22995c0846ff9fc56beb59f873b7","6469df7b4ad7480f9ed4bc504e87d945","5ec24f3e9e9c48f999471b9622c3c9d6"]},"id":"MJpduR0nJRjV","executionInfo":{"status":"ok","timestamp":1665474950035,"user_tz":-540,"elapsed":1443,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"1c424ee6-331e-433b-c2c4-c8dab6b03692"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:datasets.builder:No config specified, defaulting to: wiki_lingua/en\n","WARNING:datasets.builder:Found cached dataset wiki_lingua (/root/.cache/huggingface/datasets/GEM___wiki_lingua/en/2.0.0/84e1fa083237de0bf0016a1934d8b659ecafd567f398012ca5d702b7acc97450)\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/5 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ff776f6fe9f74923baff043853fb67cc"}},"metadata":{}}]},{"cell_type":"code","source":["'''\n","TRAIN_NUM = 25000\n","TEST_NUM = 500\n","CD_train = [CD['train']['text'][:TRAIN_NUM], CD['train']['label'][:TRAIN_NUM]]\n","CD_valid = [CD['validation']['text'][:TEST_NUM], CD['validation']['label'][:TEST_NUM]]\n","CD_test = [CD['test']['text'][:TEST_NUM], CD['test']['label'][:TEST_NUM]]\n","'''"],"metadata":{"id":"TyLvdge_FX6t","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1665474950036,"user_tz":-540,"elapsed":26,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"f01add65-173d-41c2-ca3a-bac02de1e4ab"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nTRAIN_NUM = 25000\\nTEST_NUM = 500\\nCD_train = [CD['train']['text'][:TRAIN_NUM], CD['train']['label'][:TRAIN_NUM]]\\nCD_valid = [CD['validation']['text'][:TEST_NUM], CD['validation']['label'][:TEST_NUM]]\\nCD_test = [CD['test']['text'][:TEST_NUM], CD['test']['label'][:TEST_NUM]]\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["'''\n","TRAIN_NUM = 25000\n","TEST_NUM = 500\n","GD_train = [GD['train']['review_title'][:TRAIN_NUM], GD['train']['review_body'][:TRAIN_NUM]]\n","GD_valid = [GD['validation']['review_title'][:TEST_NUM], GD['validation']['review_body'][:TEST_NUM]]\n","GD_test = [GD['test']['review_title'][:TEST_NUM], GD['test']['review_body'][:TEST_NUM]]\n","'''"],"metadata":{"id":"crnomDwCF6eY","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1665474950038,"user_tz":-540,"elapsed":25,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"b5516b50-828c-41d8-efe0-c95bae80343b"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nTRAIN_NUM = 25000\\nTEST_NUM = 500\\nGD_train = [GD['train']['review_title'][:TRAIN_NUM], GD['train']['review_body'][:TRAIN_NUM]]\\nGD_valid = [GD['validation']['review_title'][:TEST_NUM], GD['validation']['review_body'][:TEST_NUM]]\\nGD_test = [GD['test']['review_title'][:TEST_NUM], GD['test']['review_body'][:TEST_NUM]]\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["SD"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x4LwW6xJZqc9","executionInfo":{"status":"ok","timestamp":1665474950039,"user_tz":-540,"elapsed":24,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"9d57d2aa-7b50-4693-a992-877a5f488c1b"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DatasetDict({\n","    train: Dataset({\n","        features: ['gem_id', 'gem_parent_id', 'source_language', 'target_language', 'source', 'target', 'references'],\n","        num_rows: 95517\n","    })\n","    validation: Dataset({\n","        features: ['gem_id', 'gem_parent_id', 'source_language', 'target_language', 'source', 'target', 'references'],\n","        num_rows: 13340\n","    })\n","    test: Dataset({\n","        features: ['gem_id', 'gem_parent_id', 'source_language', 'target_language', 'source', 'target', 'references'],\n","        num_rows: 27489\n","    })\n","    sampled_validation: Dataset({\n","        features: ['gem_id', 'gem_parent_id', 'source_language', 'target_language', 'source', 'target', 'references'],\n","        num_rows: 3000\n","    })\n","    sampled_test: Dataset({\n","        features: ['gem_id', 'gem_parent_id', 'source_language', 'target_language', 'source', 'target', 'references'],\n","        num_rows: 3000\n","    })\n","})"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["TRAIN_NUM = 12500\n","TEST_NUM = 500\n","SD_train = [[],[]]\n","SD_valid = [[],[]]\n","SD_test = [[],[]]\n","\n","cnt = 0\n","for i in SD['train']:\n","  if i['source_language']=='en' and i['target_language']=='en' :\n","    cnt+=1\n","    SD_train[0].append(i['source'])\n","    SD_train[1].append(i['target'])\n","  if cnt==TRAIN_NUM:\n","    break\n","print(cnt)\n","cnt = 0\n","for i in SD['test']:\n","  if i['source_language']=='en' and i['target_language']=='en' :\n","    cnt+=1\n","    SD_test[0].append(i['source'])\n","    SD_test[1].append(i['target'])\n","  if cnt==TEST_NUM:\n","    break\n","print(cnt)\n","cnt = 0\n","for i in SD['validation']:\n","  if i['source_language']=='en' and i['target_language']=='en' :\n","    cnt+=1\n","    SD_valid[0].append(i['source'])\n","    SD_valid[1].append(i['target'])\n","  if cnt==TEST_NUM:\n","    break\n","print(cnt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CLYOVxq4GxQj","executionInfo":{"status":"ok","timestamp":1665474951829,"user_tz":-540,"elapsed":1808,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"6fb64319-2ff1-47ff-9805-140b0cb14fe3"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["12500\n","500\n","500\n"]}]},{"cell_type":"code","source":["import nltk"],"metadata":{"id":"ipoCWX5zM7ct","executionInfo":{"status":"ok","timestamp":1665474951830,"user_tz":-540,"elapsed":11,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["nltk.download('punkt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_PstDR8ZSYG-","executionInfo":{"status":"ok","timestamp":1665474951831,"user_tz":-540,"elapsed":11,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"5559d37c-ec5b-43b2-ea0d-a2cfc14f1ae1"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["nltk.download('stopwords')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cNKRgvWLRwfg","executionInfo":{"status":"ok","timestamp":1665474952180,"user_tz":-540,"elapsed":9,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"237331d0-6ce0-4c93-8868-fa5ecca43721"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n"]},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["import string"],"metadata":{"id":"HiROucyZR4xN","executionInfo":{"status":"ok","timestamp":1665474952181,"user_tz":-540,"elapsed":7,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["stopwords = nltk.corpus.stopwords.words('english')"],"metadata":{"id":"TWzOnundR0zt","executionInfo":{"status":"ok","timestamp":1665474952181,"user_tz":-540,"elapsed":7,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["for i in range(len(SD_train[0])):\n","  tokens = nltk.tokenize.word_tokenize(SD_train[0][i])\n","  SD_train[0][i] = [token.lower() for token in tokens if token.lower() not in stopwords]\n","for i in range(len(SD_test[0])):\n","  tokens = nltk.tokenize.word_tokenize(SD_test[0][i])\n","  SD_test[0][i] = [token.lower() for token in tokens if token.lower() not in stopwords]\n","for i in range(len(SD_valid[0])):\n","  tokens = nltk.tokenize.word_tokenize(SD_valid[0][i])\n","  SD_valid[0][i] = [token.lower() for token in tokens if token.lower() not in stopwords]"],"metadata":{"id":"c-y5l2H7Q4Ag","executionInfo":{"status":"ok","timestamp":1665475021209,"user_tz":-540,"elapsed":69034,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["SD_train[0][0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G2_EeoNZqVhJ","executionInfo":{"status":"ok","timestamp":1665475021210,"user_tz":-540,"elapsed":31,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"e033b04b-78ba-400d-dfa7-e6c72af854ff"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['honesty',\n"," 'usually',\n"," 'best',\n"," 'policy',\n"," '.',\n"," 'disrespectful',\n"," 'lie',\n"," 'someone',\n"," '.',\n"," \"n't\",\n"," 'want',\n"," 'date',\n"," 'someone',\n"," ',',\n"," 'say',\n"," '.',\n"," 'sometimes',\n"," 'easy',\n"," 'honest',\n"," '.',\n"," 'example',\n"," ',',\n"," 'might',\n"," 'able',\n"," 'truthfully',\n"," 'say',\n"," ',',\n"," '``',\n"," ',',\n"," 'thank',\n"," ',',\n"," 'already',\n"," 'date',\n"," 'party',\n"," '.',\n"," \"''\",\n"," 'times',\n"," ',',\n"," 'might',\n"," 'need',\n"," 'find',\n"," 'kinder',\n"," 'way',\n"," 'nice',\n"," '.',\n"," 'maybe',\n"," 'attracted',\n"," 'person',\n"," '.',\n"," 'instead',\n"," 'bluntly',\n"," 'saying',\n"," ',',\n"," 'try',\n"," 'saying',\n"," ',',\n"," '``',\n"," ',',\n"," 'thank',\n"," ',',\n"," \"n't\",\n"," 'think',\n"," 'would',\n"," 'good',\n"," 'fit',\n"," '.',\n"," \"''\",\n"," 'avoid',\n"," 'making',\n"," 'phony',\n"," 'excuse',\n"," '.',\n"," 'instance',\n"," ',',\n"," \"n't\",\n"," 'tell',\n"," 'someone',\n"," 'town',\n"," 'weekend',\n"," 'wo',\n"," \"n't\",\n"," '.',\n"," \"'s\",\n"," 'chance',\n"," 'might',\n"," 'run',\n"," 'movies',\n"," ',',\n"," 'would',\n"," 'definitely',\n"," 'cause',\n"," 'hurt',\n"," 'feelings',\n"," '.',\n"," 'compliment',\n"," 'sandwich',\n"," 'really',\n"," 'effective',\n"," 'way',\n"," 'provide',\n"," 'feedback',\n"," '.',\n"," 'essentially',\n"," ',',\n"," '``',\n"," 'sandwich',\n"," \"''\",\n"," 'negative',\n"," 'comment',\n"," 'two',\n"," 'positive',\n"," 'things',\n"," '.',\n"," 'try',\n"," 'using',\n"," 'method',\n"," 'need',\n"," 'reject',\n"," 'someone',\n"," '.',\n"," 'example',\n"," 'compliment',\n"," 'sandwich',\n"," 'say',\n"," 'something',\n"," ',',\n"," '``',\n"," \"'re\",\n"," 'awesome',\n"," 'person',\n"," '.',\n"," 'unfortunately',\n"," ',',\n"," \"'m\",\n"," 'interested',\n"," 'dating',\n"," '.',\n"," 'someone',\n"," 'else',\n"," 'going',\n"," 'really',\n"," 'lucky',\n"," 'date',\n"," 'someone',\n"," 'great',\n"," 'personality',\n"," '!',\n"," \"''\",\n"," 'could',\n"," 'also',\n"," 'try',\n"," ',',\n"," '``',\n"," 'really',\n"," 'nice',\n"," 'person',\n"," '.',\n"," \"'m\",\n"," 'interested',\n"," 'friend',\n"," '.',\n"," 'like',\n"," 'hang',\n"," 'big',\n"," 'groups',\n"," 'together',\n"," '!',\n"," \"''\",\n"," 'sincere',\n"," '.',\n"," 'offer',\n"," 'false',\n"," 'compliments',\n"," ',',\n"," 'person',\n"," 'likely',\n"," 'able',\n"," 'tell',\n"," 'feel',\n"," 'hurt',\n"," '.',\n"," 'want',\n"," 'date',\n"," 'someone',\n"," ',',\n"," 'best',\n"," 'upfront',\n"," 'feelings',\n"," '.',\n"," 'beat',\n"," 'around',\n"," 'bush',\n"," '.',\n"," 'mind',\n"," 'made',\n"," ',',\n"," 'best',\n"," 'clearly',\n"," 'state',\n"," 'response',\n"," '.',\n"," 'someone',\n"," 'asks',\n"," 'date',\n"," \"n't\",\n"," 'want',\n"," ',',\n"," 'direct',\n"," 'kind',\n"," 'time',\n"," '.',\n"," 'state',\n"," 'answer',\n"," 'clearly',\n"," '.',\n"," 'make',\n"," 'feelings',\n"," 'clear',\n"," 'without',\n"," 'purposefully',\n"," 'hurting',\n"," 'someone',\n"," 'else',\n"," \"'s\",\n"," 'feelings',\n"," '.',\n"," 'try',\n"," 'smiling',\n"," 'saying',\n"," ',',\n"," '``',\n"," 'sounds',\n"," 'fun',\n"," ',',\n"," 'thank',\n"," '.',\n"," \"'m\",\n"," 'interested',\n"," 'dating',\n"," '.',\n"," \"''\",\n"," \"n't\",\n"," 'beat',\n"," 'around',\n"," 'bush',\n"," '.',\n"," 'want',\n"," 'accept',\n"," 'date',\n"," ',',\n"," 'need',\n"," 'say',\n"," ',',\n"," '``',\n"," 'let',\n"," 'think',\n"," '.',\n"," \"''\",\n"," 'best',\n"," 'get',\n"," 'rejection',\n"," '.',\n"," \"n't\",\n"," 'want',\n"," 'give',\n"," 'someone',\n"," 'false',\n"," 'hope',\n"," '.',\n"," 'avoid',\n"," 'saying',\n"," 'something',\n"," 'like',\n"," ',',\n"," '``',\n"," 'let',\n"," 'check',\n"," 'schedule',\n"," 'get',\n"," 'back',\n"," '.',\n"," \"''\",\n"," 'try',\n"," 'treat',\n"," 'person',\n"," 'way',\n"," 'would',\n"," 'want',\n"," 'treated',\n"," '.',\n"," 'means',\n"," 'choose',\n"," 'words',\n"," 'carefully',\n"," '.',\n"," 'thoughtful',\n"," 'response',\n"," '.',\n"," \"'s\",\n"," 'okay',\n"," 'pause',\n"," 'responding',\n"," '.',\n"," 'might',\n"," 'taken',\n"," 'surprise',\n"," 'need',\n"," 'moment',\n"," 'collect',\n"," 'thoughts',\n"," '.',\n"," 'say',\n"," 'thank',\n"," '.',\n"," 'compliment',\n"," 'asked',\n"," '.',\n"," 'say',\n"," ',',\n"," '``',\n"," \"'m\",\n"," 'flattered',\n"," '.',\n"," 'unfortunately',\n"," ',',\n"," 'ca',\n"," \"n't\",\n"," 'accept',\n"," '.',\n"," \"''\",\n"," \"n't\",\n"," 'laugh',\n"," '.',\n"," 'many',\n"," 'people',\n"," 'laugh',\n"," 'nervously',\n"," 'awkward',\n"," 'situations',\n"," '.',\n"," 'try',\n"," 'avoid',\n"," 'giggling',\n"," ',',\n"," 'likely',\n"," 'result',\n"," 'hurt',\n"," 'feelings',\n"," '.',\n"," 'sometimes',\n"," 'say',\n"," ',',\n"," 'say',\n"," '.',\n"," 'need',\n"," 'reject',\n"," 'someone',\n"," ',',\n"," 'think',\n"," 'factors',\n"," 'words',\n"," '.',\n"," 'non-verbal',\n"," 'communication',\n"," 'matters',\n"," ',',\n"," '.',\n"," 'use',\n"," 'right',\n"," 'tone',\n"," 'voice',\n"," '.',\n"," 'try',\n"," 'sound',\n"," 'gentle',\n"," 'firm',\n"," '.',\n"," 'make',\n"," 'eye',\n"," 'contact',\n"," '.',\n"," 'helps',\n"," 'convey',\n"," 'serious',\n"," ',',\n"," 'also',\n"," 'shows',\n"," 'respect',\n"," 'person',\n"," '.',\n"," 'public',\n"," ',',\n"," 'try',\n"," 'speak',\n"," 'loudly',\n"," '.',\n"," 'necessary',\n"," 'everyone',\n"," 'around',\n"," 'know',\n"," 'turning',\n"," 'date',\n"," '.']"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["for i in range(len(SD_train[1])):\n","  tokens = nltk.tokenize.word_tokenize(SD_train[1][i])\n","  SD_train[1][i] = [token.lower() for token in tokens]\n","for i in range(len(SD_test[1])):\n","  tokens = nltk.tokenize.word_tokenize(SD_test[1][i])\n","  SD_test[1][i] = [token.lower() for token in tokens]\n","for i in range(len(SD_valid[1])):\n","  tokens = nltk.tokenize.word_tokenize(SD_valid[1][i])\n","  SD_valid[1][i] = [token.lower() for token in tokens]"],"metadata":{"id":"v0k7jE3lbVEB","executionInfo":{"status":"ok","timestamp":1665475027788,"user_tz":-540,"elapsed":6603,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["SD_train[1][0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0QKT2bRlqZIu","executionInfo":{"status":"ok","timestamp":1665475027789,"user_tz":-540,"elapsed":17,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"dda6a3aa-4242-40da-a415-801502838362"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['tell',\n"," 'the',\n"," 'truth',\n"," '.',\n"," 'use',\n"," 'a',\n"," '``',\n"," 'compliment',\n"," 'sandwich',\n"," \"''\",\n"," '.',\n"," 'be',\n"," 'direct',\n"," '.',\n"," 'treat',\n"," 'the',\n"," 'person',\n"," 'with',\n"," 'respect',\n"," '.',\n"," 'communicate',\n"," 'effectively',\n"," '.']"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["vocab_to_int = {'<unk>' : 0, '<sos>' : 0, '<eos>' : 0, '<pad>' : 0}\n","for sentence in SD_train[0]+SD_train[1]:\n","  for word in sentence:\n","    try:\n","      vocab_to_int[word]+=1\n","    except:\n","      vocab_to_int[word]=1"],"metadata":{"id":"qhk7S3oT9OIo","executionInfo":{"status":"ok","timestamp":1665475244391,"user_tz":-540,"elapsed":1542,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["vocab_to_int"],"metadata":{"id":"WTMWzQlODwXQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(vocab_to_int)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3cncUZUl-7gp","executionInfo":{"status":"ok","timestamp":1665475251161,"user_tz":-540,"elapsed":4,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"7da66bf5-3263-453b-9c13-5a023a5fb1a5"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["65634"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["vocab2int = {}\n","int2vocab = {}"],"metadata":{"id":"6oeX0IPVCvPV","executionInfo":{"status":"ok","timestamp":1665475297990,"user_tz":-540,"elapsed":593,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["min_freq = 2\n","cnt = 0\n","for key in vocab_to_int:\n","  if vocab_to_int[key]>=min_freq or vocab_to_int[key]==0:\n","    vocab2int[key] = cnt\n","    int2vocab[cnt] = key\n","    cnt+=1"],"metadata":{"id":"OEX2m4YTC2XV","executionInfo":{"status":"ok","timestamp":1665475299129,"user_tz":-540,"elapsed":5,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":41,"outputs":[]},{"cell_type":"code","source":["len(vocab2int)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bl3p1vDaDmCt","executionInfo":{"status":"ok","timestamp":1665475299725,"user_tz":-540,"elapsed":5,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"bb35c1cd-3e8d-4039-a132-edba9cb749bc"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["38075"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["from torch import nn\n","import torch"],"metadata":{"id":"QYC74nijCDOE","executionInfo":{"status":"ok","timestamp":1665475301260,"user_tz":-540,"elapsed":1132,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["class Encoder(nn.Module):\n","    def __init__(self, input_dim, emb_dim, hid_dim, n_layers, dropout):\n","        super().__init__()\n","        \n","        self.hid_dim = hid_dim\n","        self.n_layers = n_layers\n","        \n","        self.embedding = nn.Embedding(input_dim, emb_dim)\n","        \n","        self.rnn = nn.LSTM(emb_dim, hid_dim, num_layers=n_layers, dropout=dropout)\n","        \n","        self.dropout = nn.Dropout(dropout)\n","    def forward(self, src):\n","        # src : [sen_len, batch_size]\n","        embedded = self.dropout(self.embedding(src))\n","        \n","        # embedded : [sen_len, batch_size, emb_dim]\n","        outputs, (hidden, cell) = self.rnn(embedded)\n","        # outputs = [sen_len, batch_size, hid_dim * n_directions]\n","        # hidden = [n_layers * n_direction, batch_size, hid_dim]\n","        # cell = [n_layers * n_direction, batch_size, hid_dim]\n","        return hidden, cell"],"metadata":{"id":"rlOqLhFhCBZQ","executionInfo":{"status":"ok","timestamp":1665475301785,"user_tz":-540,"elapsed":4,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["class Decoder(nn.Module):\n","    def __init__(self, output_dim, emb_dim, hid_dim, n_layers, dropout):\n","        super().__init__()\n","        \n","        self.output_dim = output_dim\n","        self.emb_dim = emb_dim\n","        self.hid_dim = hid_dim\n","        self.n_layers = n_layers\n","        \n","        self.embedding = nn.Embedding(output_dim, emb_dim)\n","        \n","        self.rnn = nn.LSTM(emb_dim, hid_dim, num_layers=self.n_layers, dropout=dropout)\n","        \n","        self.fc_out = nn.Linear(hid_dim, output_dim)\n","        \n","        self.dropout = nn.Dropout(dropout)\n","        \n","    def forward(self, input, hidden, cell):\n","        \n","        # input = [batch_size]\n","        # hidden = [n_layers * n_dir, batch_size, hid_dim]\n","        # cell = [n_layers * n_dir, batch_size, hid_dim]\n","        \n","        input = input.unsqueeze(0)\n","        # input : [1, ,batch_size]\n","        \n","        embedded = self.dropout(self.embedding(input))\n","        # embedded = [1, batch_size, emb_dim]\n","        \n","        output, (hidden, cell) = self.rnn(embedded, (hidden, cell))\n","        # output = [seq_len, batch_size, hid_dim * n_dir]\n","        # hidden = [n_layers * n_dir, batch_size, hid_dim]\n","        # cell = [n_layers * n_dir, batch_size, hid_dim]\n","        \n","        # seq_len and n_dir will always be 1 in the decoder\n","        prediction = self.fc_out(output.squeeze(0))\n","        # prediction = [batch_size, output_dim]\n","        return prediction, hidden, cell"],"metadata":{"id":"_JjFrnlWCMwk","executionInfo":{"status":"ok","timestamp":1665475303893,"user_tz":-540,"elapsed":3,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["class Seq2Seq(nn.Module):\n","    def __init__(self, encoder, decoder, device):\n","        super().__init__()\n","        \n","        self.encoder = encoder\n","        self.decoder = decoder\n","        self.device = device\n","        \n","        assert encoder.hid_dim == decoder.hid_dim, \\\n","            'hidden dimensions of encoder and decoder must be equal.'\n","        assert encoder.n_layers == decoder.n_layers, \\\n","            'n_layers of encoder and decoder must be equal.'\n","        \n","    def forward(self, src, trg, teacher_forcing_ratio=0.5):\n","        # src = [sen_len, batch_size]\n","        # trg = [sen_len, batch_size]\n","        # teacher_forcing_ratio : the probability to use the teacher forcing.\n","        batch_size = trg.shape[1]\n","        trg_len = trg.shape[0]\n","        trg_vocab_size = self.decoder.output_dim\n","        \n","        # tensor to store decoder outputs\n","        outputs = torch.zeros(trg_len, batch_size, trg_vocab_size).to(self.device)\n","        \n","        # last hidden state of the encoder is used as the initial hidden state of the decoder\n","        hidden, cell = self.encoder(src)\n","        \n","        # first input to the decoder is the <sos> token.\n","        input = trg[0, :]\n","        for t in range(1, trg_len):\n","            # insert input token embedding, previous hidden and previous cell states \n","            # receive output tensor (predictions) and new hidden and cell states.\n","            output, hidden, cell = self.decoder(input, hidden, cell)\n","            \n","            # replace predictions in a tensor holding predictions for each token\n","            outputs[t] = output\n","            \n","            # decide if we are going to use teacher forcing or not.\n","            teacher_force = random.random() < teacher_forcing_ratio\n","            \n","            # get the highest predicted token from our predictions.\n","            top1 = output.argmax(1)\n","            # update input : use ground_truth when teacher_force \n","            input = trg[t] if teacher_force else top1\n","            \n","        return outputs"],"metadata":{"id":"FeXjLFewCN_N","executionInfo":{"status":"ok","timestamp":1665475305810,"user_tz":-540,"elapsed":3,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["# First initialize our model.\n","device = torch.device('cuda')\n","vocab_num = len(int2vocab)\n","INPUT_DIM = vocab_num\n","OUTPUT_DIM = vocab_num\n","ENC_EMB_DIM = 256\n","DEC_EMB_DIM = 256\n","HID_DIM = 512\n","N_LAYERS = 2\n","ENC_DROPOUT = 0.5\n","DEC_DROPOUT = 0.5\n","\n","encoder = Encoder(INPUT_DIM, ENC_EMB_DIM, HID_DIM, N_LAYERS, ENC_DROPOUT)\n","decoder = Decoder(OUTPUT_DIM, DEC_EMB_DIM, HID_DIM, N_LAYERS, DEC_DROPOUT)\n","\n","model = Seq2Seq(encoder, decoder, device).to(device)"],"metadata":{"id":"fuwfPx5KCWQx","executionInfo":{"status":"ok","timestamp":1665475313801,"user_tz":-540,"elapsed":1023,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["def init_weights(m):\n","    for name, param in m.named_parameters():\n","        nn.init.uniform_(param.data, -0.08, 0.08)\n","        \n","model.apply(init_weights)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3jchCcNeDFsI","executionInfo":{"status":"ok","timestamp":1665475317462,"user_tz":-540,"elapsed":590,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"b09bf9cd-e0e7-49cd-bf2e-4a84ba358fa0"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Seq2Seq(\n","  (encoder): Encoder(\n","    (embedding): Embedding(38075, 256)\n","    (rnn): LSTM(256, 512, num_layers=2, dropout=0.5)\n","    (dropout): Dropout(p=0.5, inplace=False)\n","  )\n","  (decoder): Decoder(\n","    (embedding): Embedding(38075, 256)\n","    (rnn): LSTM(256, 512, num_layers=2, dropout=0.5)\n","    (fc_out): Linear(in_features=512, out_features=38075, bias=True)\n","    (dropout): Dropout(p=0.5, inplace=False)\n","  )\n",")"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["def count_parameters(model):\n","    return sum(p.numel() for p in model.parameters() if p.requires_grad)\n","\n","print(f'The model has {count_parameters(model):,} trainable parameters')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2stsEsvkDWKT","executionInfo":{"status":"ok","timestamp":1665475319157,"user_tz":-540,"elapsed":4,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"3c16253c-b957-44dd-ce12-ed447bbd47ab"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["The model has 46,383,291 trainable parameters\n"]}]},{"cell_type":"code","source":["vocab2int['<pad>']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iAdAVzexFqmz","executionInfo":{"status":"ok","timestamp":1665475327019,"user_tz":-540,"elapsed":4,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"86506c66-1431-472d-ba17-a64128ffea20"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["optimizer = torch.optim.Adam(model.parameters())\n","\n","criterion = nn.CrossEntropyLoss(ignore_index=vocab_to_int['<pad>'])"],"metadata":{"id":"iidN9ibWDc--","executionInfo":{"status":"ok","timestamp":1665475337761,"user_tz":-540,"elapsed":307,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["for i in SD_train[0]:\n","  i = ['<sos>']+i+['<eos>']\n","for i in SD_train[1]:\n","  i = ['<sos>']+i+['<eos>']"],"metadata":{"id":"uuJZcunaEQNJ","executionInfo":{"status":"ok","timestamp":1665475367642,"user_tz":-540,"elapsed":12,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["SRC_MAX_LEN = max(len(i) for i in SD_train[0])"],"metadata":{"id":"LTZJWJjJGBQp","executionInfo":{"status":"ok","timestamp":1665475369609,"user_tz":-540,"elapsed":4,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["TRG_MAX_LEN = max(len(i) for i in SD_train[1])"],"metadata":{"id":"tXq3gao3GV29","executionInfo":{"status":"ok","timestamp":1665475370501,"user_tz":-540,"elapsed":3,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["for i in SD_train[0]:\n","  i+=['<pad>']*(SRC_MAX_LEN-len(i))\n","for i in SD_train[1]:\n","  i+=['<pad>']*(TRG_MAX_LEN-len(i)) "],"metadata":{"id":"W6DIym7mGkhC","executionInfo":{"status":"ok","timestamp":1665475372373,"user_tz":-540,"elapsed":438,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["vocab2int['<pad>']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OQz4qhLmEvS7","executionInfo":{"status":"ok","timestamp":1665475480661,"user_tz":-540,"elapsed":14,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"d85b2d03-f917-42e8-f32e-d8aa867265b1"},"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["for sentence in SD_train[0]:\n","  for i in range(len(sentence)):\n","    try:\n","      sentence[i] = vocab2int[sentence[i]]\n","    except:\n","      sentence[i] = vocab2int['<unk>']\n","for sentence in SD_train[1]:\n","  for i in range(len(sentence)):\n","    try:\n","      sentence[i] = vocab2int[sentence[i]]\n","    except:\n","      sentence[i] = vocab2int['<unk>']"],"metadata":{"id":"x387KTAHG-VB","executionInfo":{"status":"ok","timestamp":1665475434098,"user_tz":-540,"elapsed":6219,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["src_train = torch.tensor(SD_train[0])\n","trg_train = torch.tensor(SD_train[1])"],"metadata":{"id":"eXs2g3YEHQG6","executionInfo":{"status":"ok","timestamp":1665475715025,"user_tz":-540,"elapsed":308,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","source":["SD_train[0][-1]"],"metadata":{"id":"HFPzWcouFZqc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["src_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xY08oKnAHyqi","executionInfo":{"status":"ok","timestamp":1665475716746,"user_tz":-540,"elapsed":7,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"0542623c-b627-4f0f-91b8-afc77d10542b"},"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([12500, 1908])"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["trg_train.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mh2b4_wZH0Pu","executionInfo":{"status":"ok","timestamp":1665475718962,"user_tz":-540,"elapsed":327,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"6608266d-500d-461d-cadd-5b8465416ff9"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([12500, 229])"]},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["src_train.shape"],"metadata":{"id":"k3vrmGmPIGo7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665474155531,"user_tz":-540,"elapsed":537,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"19c1b7ed-99f3-4655-cb8b-b1d445e1f3bc"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([12500, 1908])"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["from torch.utils.data import TensorDataset\n","from torch.utils.data import DataLoader"],"metadata":{"id":"Pi1rLhi0F5Mr","executionInfo":{"status":"ok","timestamp":1665475753287,"user_tz":-540,"elapsed":5,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["class TextDataset(TensorDataset):\n","  def __init__(self, src_data, trg_data):\n","    self.src_data = src_data\n","    self.trg_data = trg_data\n","\n","  def __len__(self):\n","    return len(self.src_data)\n","\n","  def __getitem__(self, idx):\n","    SRC = nn.functional.one_hot(self.src_data[idx:idx+1], num_classes=vocab_num)\n","    TRG = nn.functional.one_hot(self.trg_data[idx:idx+1], num_classes=vocab_num)\n","    return SRC, TRG"],"metadata":{"id":"zHAZJWQl_khG","executionInfo":{"status":"ok","timestamp":1665475754386,"user_tz":-540,"elapsed":5,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["train_data = TextDataset(src_train, trg_train)"],"metadata":{"id":"V5JNqpChBXLd","executionInfo":{"status":"ok","timestamp":1665475757034,"user_tz":-540,"elapsed":3,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["train_dataloader = DataLoader(train_data, batch_size=64, shuffle=True)"],"metadata":{"id":"66F4YA-7BP_l","executionInfo":{"status":"ok","timestamp":1665475759161,"user_tz":-540,"elapsed":4,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":76,"outputs":[]},{"cell_type":"code","source":["len(train_dataloader)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bZc96BUUCPZH","executionInfo":{"status":"ok","timestamp":1665475780619,"user_tz":-540,"elapsed":249,"user":{"displayName":"장진우","userId":"13103785151421951991"}},"outputId":"bfb192ee-ca62-4555-8837-a9704b6e0924"},"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["196"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","source":["for i, batch in enumerate(train_dataloader):\n","  print(batch)\n","  input()"],"metadata":{"id":"I0m1ufg1F6cG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train(model, iterator, optimizer, criterion, clip):\n","    \n","    model.train()\n","    \n","    epoch_loss = 0\n","    \n","    for i, batch in enumerate(iterator):\n","        src = batch.src\n","        trg = batch.trg\n","        \n","        optimizer.zero_grad()\n","        # trg = [sen_len, batch_size]\n","        # output = [trg_len, batch_size, output_dim]\n","        output = model(src, trg)\n","        output_dim = output.shape[-1]\n","        \n","        # transfrom our output : slice off the first column, and flatten the output into 2 dim.\n","        output = output[1:].view(-1, output_dim) \n","        trg = trg[1:].view(-1)\n","        # trg = [(trg_len-1) * batch_size]\n","        # output = [(trg_len-1) * batch_size, output_dim]\n","        \n","        loss = criterion(output, trg)\n","        \n","        loss.backward()\n","        \n","        torch.nn.utils.clip_grad_norm_(model.parameters(), clip)\n","        \n","        optimizer.step()\n","        \n","        epoch_loss += loss.item()\n","        \n","    return epoch_loss / len(iterator)"],"metadata":{"id":"D4Q_NC-gDtGD","executionInfo":{"status":"aborted","timestamp":1665472863757,"user_tz":-540,"elapsed":70,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def evaluate(model, iterator, criterion):\n","    \n","    model.eval()\n","    \n","    epoch_loss = 0\n","    \n","    with torch.no_grad():\n","        \n","        for i, batch in enumerate(iterator):\n","            \n","            src = batch.src\n","            trg = batch.trg\n","            \n","            output = model(src, trg, 0) # turn off teacher forcing.\n","            \n","            # trg = [sen_len, batch_size]\n","            # output = [sen_len, batch_size, output_dim]\n","            output_dim = output.shape[-1]\n","            \n","            output = output[1:].view(-1, output_dim)\n","            trg = trg[1:].view(-1)\n","            \n","            loss = criterion(output, trg)\n","            \n","            epoch_loss += loss.item()\n","            \n","    return epoch_loss / len(iterator)\n","    \n","# a function that used to tell us how long an epoch takes.\n","def epoch_time(start_time, end_time):\n","    \n","    elapsed_time = end_time - start_time\n","    elapsed_mins = int(elapsed_time  / 60)\n","    elapsed_secs = int(elapsed_time -  (elapsed_mins * 60))\n","    return  elapsed_mins, elapsed_secs\n","N_EPOCHS = 10\n","\n","CLIP = 1\n","\n","best_valid_loss = float('inf')\n","\n","for epoch in range(N_EPOCHS):\n","    \n","    start_time = time.time()\n","    \n","    train_loss = train(model, train_iter, optimizer, criterion, CLIP)\n","    valid_loss = evaluate(model, valid_iter, criterion)\n","    \n","    end_time = time.time()\n","    epoch_mins, epoch_secs = epoch_time(start_time, end_time)\n","    \n","    if valid_loss < best_valid_loss:\n","        best_valid_loss = valid_loss\n","        torch.save(model.state_dict(), 'Seq2SeqModel.pt')\n","    print(f\"Epoch: {epoch+1:02} | Time {epoch_mins}m {epoch_secs}s\")\n","    print(f\"\\tTrain Loss: {train_loss:.3f} | Train PPL: {math.exp(train_loss):7.3f}\")\n","    print(f\"\\tValid Loss: {valid_loss:.3f} | Valid PPL: {math.exp(valid_loss):7.3f}\")"],"metadata":{"id":"SAVpX0SXEpRz","executionInfo":{"status":"aborted","timestamp":1665472863758,"user_tz":-540,"elapsed":71,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def test():\n","    best_model = Seq2Seq(encoder, decoder, device).to(device)\n","    best_model.load_state_dict(torch.load('Seq2SeqModel.pt'))\n","    \n","    test_loss = evaluate(model, test_iter, criterion)\n","    \n","    print(f\"Test Loss : {test_loss:.3f} | Test PPL: {math.exp(test_loss):7.3f}\")\n","    \n","test()"],"metadata":{"id":"YqiHLMyoEseJ","executionInfo":{"status":"aborted","timestamp":1665472863760,"user_tz":-540,"elapsed":73,"user":{"displayName":"장진우","userId":"13103785151421951991"}}},"execution_count":null,"outputs":[]}]}